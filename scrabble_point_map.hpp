#ifndef scrabble_point_map_h
#define scrabble_point_map_h

#include <map>

////////////////////////////////////////////////////////////////////////////////
class Point_Map
////////////////////////////////////////////////////////////////////////////////
{
 public:
  virtual unsigned get_point_val(char letter) const = 0;
  virtual ~Point_Map() {}
};

/**
 * This class is a singleton. The global instance is the entity used by the
 * rest of the program to determine how many points a piece is worth.
 */

////////////////////////////////////////////////////////////////////////////////
class Scrabble_Point_Map : public Point_Map
////////////////////////////////////////////////////////////////////////////////
{
 public:

  //////////////////////////////////////////////////////////////////////////////
  //////////////////////////// PRIMARY INTERFACE ///////////////////////////////
  //////////////////////////////////////////////////////////////////////////////

  /**
   * instance - Returns a reference to the global singleton instance. This
   *            instance is the only public way to interact with this class.
   */
  static const Scrabble_Point_Map& instance();

  /**
   * get_point_val - Returns the point value of a piece containing a letter
   *                 matching the argument.
   */
  virtual unsigned get_point_val(char letter) const;

  virtual ~Scrabble_Point_Map() {}

 private: // ================ PRIVATE INTERFACE ================================

  //////////////////////////////////////////////////////////////////////////////
  ////////////////////////// FORBIDDEN METHODS /////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////

  Scrabble_Point_Map(const Scrabble_Point_Map&) = delete;
  Scrabble_Point_Map& operator=(const Scrabble_Point_Map&) = delete;

  //////////////////////////////////////////////////////////////////////////////
  ////////////////////////// INTERNAL METHODS //////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////

  Scrabble_Point_Map();

  //////////////////////////////////////////////////////////////////////////////
  ///////////////////////////// DATA MEMBERS ///////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////

  // m_point_map - The actual map wrapped by this class
  std::map<char, unsigned> m_point_map;
};

////////////////////////////////////////////////////////////////////////////////
class Wwf_Point_Map : public Point_Map
////////////////////////////////////////////////////////////////////////////////
{
 public:

  //////////////////////////////////////////////////////////////////////////////
  //////////////////////////// PRIMARY INTERFACE ///////////////////////////////
  //////////////////////////////////////////////////////////////////////////////

  /**
   * instance - Returns a reference to the global singleton instance. This
   *            instance is the only public way to interact with this class.
   */
  static const Wwf_Point_Map& instance();

  /**
   * get_point_val - Returns the point value of a piece containing a letter
   *                 matching the argument.
   */
  virtual unsigned get_point_val(char letter) const;

  virtual ~Wwf_Point_Map() {}

 private: // ================ PRIVATE INTERFACE ================================

  //////////////////////////////////////////////////////////////////////////////
  ////////////////////////// FORBIDDEN METHODS /////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////

  Wwf_Point_Map(const Wwf_Point_Map&) = delete;
  Wwf_Point_Map& operator=(const Wwf_Point_Map&) = delete;

  //////////////////////////////////////////////////////////////////////////////
  ////////////////////////// INTERNAL METHODS //////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////

  Wwf_Point_Map();

  //////////////////////////////////////////////////////////////////////////////
  ///////////////////////////// DATA MEMBERS ///////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////

  // m_point_map - The actual map wrapped by this class
  std::map<char, unsigned> m_point_map;
};

#endif
