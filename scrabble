#!/usr/bin/env python3

"""
Launch the scrabble platform.
"""

from utils import expect, to_cstr, to_cstr_list
import pygame

import argparse, sys, os, ctypes, time, platform, _thread

_DICTS = {
    "scrabble" : "TWL06.txt",
    "wwf"      : "WWF.txt"
    }

###############################################################################
def _parse_play_cmd(args):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n{0} play [<args>]
OR
{0} play help

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Play a scrabble game with two players, one human "me" and one AI "bot" \033[0m
    > {0} -p me -a bot

""".format(os.path.basename(sys.argv[0])),
        description="play a game of scrabble",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument("-l", "--load", default="",
                        help="Load a saved game")

    parser.add_argument("-g", "--game", default="scrabble", choices=("scrabble", "wwf"),
                        help="Select the game type. This will affect default "
                        "board, dictionary, tile points, etc.")

    parser.add_argument("-p", "--player", dest="players", action="append", default=[],
                        help="Add a human player with the given name")

    parser.add_argument("-a", "--ai", dest="ais", action="append", default=[],
                        help="Add an AI player with the given name")

    parser.add_argument("-d", "--dictionary",
                        help="Force game to use a specific word dictionary (use filepath)")

    parser.add_argument("-b", "--board", choices=("scrabble", "wwf", "wwf-solo"),
                        help="Force game to use a specific word dictionary (use filepath)")

    parser.add_argument("-t", "--tileset", choices=("scrabble", "wwf"),
                        help="Force game to use a specific tileset (tiles and point values)")

    parser.add_argument("-r", "--random-seed", type=int, default=-1,
                        help="Choose the random seed. This can allow you to repeat test results etc. "
                        "Default is -1, which means the 'time' function will be used to produce "
                        "a pseudo-random seed.")

    parser.add_argument("-u", "--gui", action="store_true",
                        help="Use a graphical interface instead of text-based.")

    if "help" in args:
        parser.print_help()
        sys.exit(0)

    args = parser.parse_args(args)

    if args.random_seed == -1:
        args.random_seed = int(time.time())

    if args.load:
        expect(not args.players,    "Cannot change players of loaded game")
        expect(not args.ais,        "Cannot change players of loaded game")
        expect(not args.dictionary, "Cannot change dictionary of loaded game")
        expect(not args.board,      "Cannot change board of loaded game")
        expect(not args.tileset,    "Cannot change tileset of loaded game")

    # Set defaults based on game
    if args.dictionary is None:
        args.dictionary = _DICTS[args.game]
    if args.board is None:
        args.board = args.game
    if args.tileset is None:
        args.tileset = args.game

    expect((len(args.players) + len(args.ais) > 0) or args.load, "Need at least one player")
    expect(os.path.exists(args.dictionary), "Missing dictionary '{}'".format(args.dictionary))

    return args

###############################################################################
def _parse_exp_cmd(args):
###############################################################################
    expect(False, "Experiment mode not supported yet")

###############################################################################
def _parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n{0} <mode> [<args>]
OR
{0} --help

The supported modes are:
  play    play a game of scrabble
  exp     set up a non-interactive experiment
""".format(os.path.basename(args[0])),
        description=description,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument("mode", help="mode to run")

    args = parser.parse_args(sys.argv[1:2])

    if args.mode == "help":
        parser.print_help()
        sys.exit(0)
    else:
        parser_name = "_parse_{}_cmd".format(args.mode)
        good_name = (parser_name in globals() and callable(globals()[parser_name]))
        if good_name:
            return args.mode, globals()[parser_name](sys.argv[2:])
        else:
            parser.print_help()
            expect(False, "Unknown mode '{}'".format(args.mode))

###############################################################################
def _play_driver(load, game, players, ais, dictionary, board, tileset, random_seed, gui):
###############################################################################
    clib = ctypes.CDLL("libscrabble.dylib" if platform.system() == "Darwin" else "./libscrabble.so")

    callback_type = ctypes.CFUNCTYPE(ctypes.c_bool, # return
                                     ctypes.c_uint,
                                     ctypes.c_uint,
                                     ctypes.POINTER(ctypes.c_uint),
                                     ctypes.POINTER(ctypes.c_uint),
                                     ctypes.POINTER(ctypes.c_char))
    callback = callback_type(pygame.callback_func)

    go = lambda: clib.c_scrabble(callback,
                                 len(players), to_cstr_list(players),
                                 len(ais),     to_cstr_list(ais),
                                 to_cstr(load), to_cstr(dictionary), to_cstr(board), to_cstr(tileset),
                                 random_seed, gui)

    if gui:
        pygame.GAME = pygame.PyScrabbleGame(11 if board is not None and board == "wwf-solo" else 15)
        _thread.start_new_thread(go, ())
        pygame.GAME.mainloop()
    else:
        go()

    # if we made it here, game is over

###############################################################################
def _exp_driver(args):
###############################################################################
    pass

###############################################################################
def _main_func(description):
###############################################################################
    mode, args = _parse_command_line(sys.argv, description)

    driver_name = "_{}_driver".format(mode)
    assert driver_name in globals() and callable(globals()[driver_name]), \
        "Missing driver '{}'".format(driver_name)
    globals()[driver_name](**vars(args))

###############################################################################

if (__name__ == "__main__"):
    _main_func(__doc__)
